/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ydcqy.ynet.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-05")
public class YrpcRequest implements org.apache.thrift.TBase<YrpcRequest, YrpcRequest._Fields>, java.io.Serializable, Cloneable, Comparable<YrpcRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("YrpcRequest");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("request_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INTERFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("interface_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("method_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new YrpcRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new YrpcRequestTupleSchemeFactory();

  public java.lang.String request_id; // required
  public java.lang.String group; // required
  public java.lang.String version; // required
  public java.lang.String interface_name; // required
  public java.lang.String method_name; // required
  public java.util.List<java.nio.ByteBuffer> params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "request_id"),
    GROUP((short)2, "group"),
    VERSION((short)3, "version"),
    INTERFACE_NAME((short)4, "interface_name"),
    METHOD_NAME((short)5, "method_name"),
    PARAMS((short)6, "params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // GROUP
          return GROUP;
        case 3: // VERSION
          return VERSION;
        case 4: // INTERFACE_NAME
          return INTERFACE_NAME;
        case 5: // METHOD_NAME
          return METHOD_NAME;
        case 6: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("request_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("interface_name", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("method_name", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(YrpcRequest.class, metaDataMap);
  }

  public YrpcRequest() {
  }

  public YrpcRequest(
          java.lang.String request_id,
          java.lang.String group,
          java.lang.String version,
          java.lang.String interface_name,
          java.lang.String method_name,
          java.util.List<java.nio.ByteBuffer> params)
  {
    this();
    this.request_id = request_id;
    this.group = group;
    this.version = version;
    this.interface_name = interface_name;
    this.method_name = method_name;
    this.params = params;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public YrpcRequest(YrpcRequest other) {
    if (other.isSetRequest_id()) {
      this.request_id = other.request_id;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetInterface_name()) {
      this.interface_name = other.interface_name;
    }
    if (other.isSetMethod_name()) {
      this.method_name = other.method_name;
    }
    if (other.isSetParams()) {
      java.util.List<java.nio.ByteBuffer> __this__params = new java.util.ArrayList<java.nio.ByteBuffer>(other.params);
      this.params = __this__params;
    }
  }

  public YrpcRequest deepCopy() {
    return new YrpcRequest(this);
  }

  @Override
  public void clear() {
    this.request_id = null;
    this.group = null;
    this.version = null;
    this.interface_name = null;
    this.method_name = null;
    this.params = null;
  }

  public java.lang.String getRequest_id() {
    return this.request_id;
  }

  public YrpcRequest setRequest_id(java.lang.String request_id) {
    this.request_id = request_id;
    return this;
  }

  public void unsetRequest_id() {
    this.request_id = null;
  }

  /** Returns true if field request_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_id() {
    return this.request_id != null;
  }

  public void setRequest_idIsSet(boolean value) {
    if (!value) {
      this.request_id = null;
    }
  }

  public java.lang.String getGroup() {
    return this.group;
  }

  public YrpcRequest setGroup(java.lang.String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public java.lang.String getVersion() {
    return this.version;
  }

  public YrpcRequest setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public java.lang.String getInterface_name() {
    return this.interface_name;
  }

  public YrpcRequest setInterface_name(java.lang.String interface_name) {
    this.interface_name = interface_name;
    return this;
  }

  public void unsetInterface_name() {
    this.interface_name = null;
  }

  /** Returns true if field interface_name is set (has been assigned a value) and false otherwise */
  public boolean isSetInterface_name() {
    return this.interface_name != null;
  }

  public void setInterface_nameIsSet(boolean value) {
    if (!value) {
      this.interface_name = null;
    }
  }

  public java.lang.String getMethod_name() {
    return this.method_name;
  }

  public YrpcRequest setMethod_name(java.lang.String method_name) {
    this.method_name = method_name;
    return this;
  }

  public void unsetMethod_name() {
    this.method_name = null;
  }

  /** Returns true if field method_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod_name() {
    return this.method_name != null;
  }

  public void setMethod_nameIsSet(boolean value) {
    if (!value) {
      this.method_name = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getParamsIterator() {
    return (this.params == null) ? null : this.params.iterator();
  }

  public void addToParams(java.nio.ByteBuffer elem) {
    if (this.params == null) {
      this.params = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.params.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getParams() {
    return this.params;
  }

  public YrpcRequest setParams(java.util.List<java.nio.ByteBuffer> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequest_id();
        } else {
          setRequest_id((java.lang.String)value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((java.lang.String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.String)value);
        }
        break;

      case INTERFACE_NAME:
        if (value == null) {
          unsetInterface_name();
        } else {
          setInterface_name((java.lang.String)value);
        }
        break;

      case METHOD_NAME:
        if (value == null) {
          unsetMethod_name();
        } else {
          setMethod_name((java.lang.String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case REQUEST_ID:
        return getRequest_id();

      case GROUP:
        return getGroup();

      case VERSION:
        return getVersion();

      case INTERFACE_NAME:
        return getInterface_name();

      case METHOD_NAME:
        return getMethod_name();

      case PARAMS:
        return getParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case REQUEST_ID:
        return isSetRequest_id();
      case GROUP:
        return isSetGroup();
      case VERSION:
        return isSetVersion();
      case INTERFACE_NAME:
        return isSetInterface_name();
      case METHOD_NAME:
        return isSetMethod_name();
      case PARAMS:
        return isSetParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof YrpcRequest)
      return this.equals((YrpcRequest)that);
    return false;
  }

  public boolean equals(YrpcRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_request_id = true && this.isSetRequest_id();
    boolean that_present_request_id = true && that.isSetRequest_id();
    if (this_present_request_id || that_present_request_id) {
      if (!(this_present_request_id && that_present_request_id))
        return false;
      if (!this.request_id.equals(that.request_id))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_interface_name = true && this.isSetInterface_name();
    boolean that_present_interface_name = true && that.isSetInterface_name();
    if (this_present_interface_name || that_present_interface_name) {
      if (!(this_present_interface_name && that_present_interface_name))
        return false;
      if (!this.interface_name.equals(that.interface_name))
        return false;
    }

    boolean this_present_method_name = true && this.isSetMethod_name();
    boolean that_present_method_name = true && that.isSetMethod_name();
    if (this_present_method_name || that_present_method_name) {
      if (!(this_present_method_name && that_present_method_name))
        return false;
      if (!this.method_name.equals(that.method_name))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRequest_id()) ? 131071 : 524287);
    if (isSetRequest_id())
      hashCode = hashCode * 8191 + request_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup())
      hashCode = hashCode * 8191 + group.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterface_name()) ? 131071 : 524287);
    if (isSetInterface_name())
      hashCode = hashCode * 8191 + interface_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethod_name()) ? 131071 : 524287);
    if (isSetMethod_name())
      hashCode = hashCode * 8191 + method_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(YrpcRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequest_id()).compareTo(other.isSetRequest_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_id, other.request_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterface_name()).compareTo(other.isSetInterface_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterface_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interface_name, other.interface_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethod_name()).compareTo(other.isSetMethod_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method_name, other.method_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("YrpcRequest(");
    boolean first = true;

    sb.append("request_id:");
    if (this.request_id == null) {
      sb.append("null");
    } else {
      sb.append(this.request_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interface_name:");
    if (this.interface_name == null) {
      sb.append("null");
    } else {
      sb.append(this.interface_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("method_name:");
    if (this.method_name == null) {
      sb.append("null");
    } else {
      sb.append(this.method_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.params, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class YrpcRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public YrpcRequestStandardScheme getScheme() {
      return new YrpcRequestStandardScheme();
    }
  }

  private static class YrpcRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<YrpcRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, YrpcRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request_id = iprot.readString();
              struct.setRequest_idIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interface_name = iprot.readString();
              struct.setInterface_nameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.method_name = iprot.readString();
              struct.setMethod_nameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.params = new java.util.ArrayList<java.nio.ByteBuffer>(_list0.size);
                java.nio.ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.params.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setParamsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, YrpcRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.request_id != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.request_id);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.interface_name != null) {
        oprot.writeFieldBegin(INTERFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.interface_name);
        oprot.writeFieldEnd();
      }
      if (struct.method_name != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.method_name);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (java.nio.ByteBuffer _iter3 : struct.params)
          {
            oprot.writeBinary(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class YrpcRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public YrpcRequestTupleScheme getScheme() {
      return new YrpcRequestTupleScheme();
    }
  }

  private static class YrpcRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<YrpcRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, YrpcRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequest_id()) {
        optionals.set(0);
      }
      if (struct.isSetGroup()) {
        optionals.set(1);
      }
      if (struct.isSetVersion()) {
        optionals.set(2);
      }
      if (struct.isSetInterface_name()) {
        optionals.set(3);
      }
      if (struct.isSetMethod_name()) {
        optionals.set(4);
      }
      if (struct.isSetParams()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRequest_id()) {
        oprot.writeString(struct.request_id);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetInterface_name()) {
        oprot.writeString(struct.interface_name);
      }
      if (struct.isSetMethod_name()) {
        oprot.writeString(struct.method_name);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (java.nio.ByteBuffer _iter4 : struct.params)
          {
            oprot.writeBinary(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, YrpcRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.request_id = iprot.readString();
        struct.setRequest_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(2)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.interface_name = iprot.readString();
        struct.setInterface_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.method_name = iprot.readString();
        struct.setMethod_nameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new java.util.ArrayList<java.nio.ByteBuffer>(_list5.size);
          java.nio.ByteBuffer _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readBinary();
            struct.params.add(_elem6);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

